Notes for assignment3
config.h : configs the malloc lab  driver
fsecs time packages (wrapper functions)
clock for accessing alpha and mac cycle memlib models the heap and sbreak

countersfcyc converts clocks to time in seconds


these are your allocation request variables inside trace_t structure
sugg_heapsize;   /* suggested heap size (unused) */
num_ids;         /* number of alloc/realloc ids */
num_ops;         /* number of distinct requests */
traceop_t *ops;      /* array of requests */
char **blocks;       /* array of ptrs returned by malloc/realloc... */
size_t *block_sizes; /* ... and a corresponding array of payload sizes */
/*
Holds the params to the xxx_speed functions, which are timed by fcyc. 
 * This struct is necessary because fcyc accepts only a pointer array
 * as input.
 */

typedef struct {
    trace_t *trace;  
    range_t *ranges;


} speed_t;

stats_t :Summarizes the important stats for some malloc function on some trace
This structure has following attributes:
secs: number of seconds to execute
ops: number of malloc/free/ realloc  operations
valid: is the trace valid
util: (defined only for  our package ) to see how much utility/importance we give to space utilization vis-s vis throughput
default value is zero set for libc malloc/free/realloc
three global variables:
verbose : whether detailed or small description of the errors
int errors: to measure the number of errors involved
msg : it is a string which  holds error message which can be printed if required
tracedir: is a string which stores  the default directory where we have to look for trace files


filename of traced files are stored in char *  default_tracefiles []
may update them
To modify the range lists add_ range, remove_range, clear_range are used.
static int add_range(range_t **ranges, char *lo, int size, 
		     int tracenum, int opnum);
static void remove_range(range_t **ranges, char *lo);
static void clear_ranges(range_t **ranges);


you need some place to hold your trace files and of trace files are changed.
static trace_t *read_trace(char *tracedir, char *filename);
static void free_trace(trace_t *trace);


to check whether standard libc malloc itsef is workimg fine.
static int eval_libc_valid(trace_t *trace, int tracenum);
static void eval_libc_speed(void *ptr);
similar check is required for student program
eval_mm_valid( *trace, tracenum, range_t \\\\**ranges);
eval_mm_util( *trace, int tracenum, range_t **ranges);
 eval_mm_speed( *ptr);

Some helper functions which are useful:


printresults( n,  *stats);
usage();
unix_error(c *msg);
malloc_error( tracenum,  opnum,  *msg);
app_error(*msg);


look out for usage called, at strange places


implementation:

1) Implicit is linear in the number of total blocks
2) explicit is linear in the number of free blocks
3) doubly linked list free blocks with links stored in the blocks itself
minimum size of a block:
we are using explicit free list. so all overheads are in free block.free block should include the following information:
1) header: size and whether it is free or allocated(4 bytes)
2)previous pointer : pointing to the previous free block(8 bytes)
3) next pointer : pointing to the next free block
4) footer: size and whether it is free or allocated(4 bytes)
so minimum size of any allocated block is 24 bytes. 

We will not use implicit free list because its time complexity is linear in the number of all blocks(free and occupied) and not in the 
number of free blocks.

Segregated fits: we shall start with powers of 2. i.e. 
There will be an array A of pointers to this list.
2) A[0] = will have a head pointing to any one block in the range [1..2] (both inclusive)
3) A[1] = will have a head pointing to any one block in the range [3..4] (both inclusive)
4) A[2]= will have a head pointing to any one block in the range [5..8] (both inclusive)
5) A[3] = will have a head pointing to any one block in the range [9..16] (both inclusive)
and so on.Let us start with these sizes and see how it goes.

Malloc(size):
  A block of a given size "S" is required(size includes payload and not overheads).
	if S is less than 16:
 		 we will allocate 24 bytes
		1)header: 4 bytes
		2) footer : 4 bytes 
		3 payload or free bloc information
	if S is greater than 16:
		we will allocate S + 8+ padding:
		1) S + padding : for storing payload and alignment
		2) 8 bytes : for header and footer information
	This allocation can be from two places:
	1) free blocks
	2) sbreak (when high water mark is reached and no place in our arena).
	a)free blocks: should  we split the block or ignore internal fragmentation?
			( i think we will have to. ex: allocate 1000 bytes, free it, allocate 10 bytes, we
			 have to make a block of 990 bytes here)
			So we will choose the block and allocate it and make a new free block 
			if its size is more than 24 bytes and put it in appropriate free block. 
			It will be a constant time operation if put it near the head.
	b) sbreak : this should be easy just increase it to appropriate size. 
	
Free (pointer to the allocated block):
	Two sequential actions to be performed:
	1)colaesce:
		check whether the previous and next blocks are free or not.
		a) previous is free and next is not:
			sum up the sizes and remove previous block from 
			its segregated free list(it will be easy as we have a doubly linked list.
			size = size of previous block + size of this block + 8 bytes 
			as there are two headers and footers in 2 blocks, we need only a single pair)
		b) next is free and previous is not: similar logic as above. replace previous by next in above
		c) both are free:
			size = size of previous + size of this +size of next block + 16 bytes( 3 header-footer pairs, we need only one) 
		d) none of them is free: 
			move to step 2
		
		2)put it in appropriate segregated free list:
			Now we have the size. we should use one of the pointers from array A described above to point to this block.
			according to size. this should be easy as we know the pattern.
			if it is in the range 2^ k + 1 to 2^ (k+1)(both inclusive) we should use A[k].
			exception: 2^0 to 2^1 : first block we can discuss that

			
Realloc:
	check whether nextblock to this request is free and will help in accomodating the entire block.
	how to check:
	payload in current block + payload of next block  <= new payload
	if yes:
		use that free block . no need to initialize that block. just change its footer with new size and change allocated bit to 1
	if no: 
		copy the data in some array, call mm_free on this block and mm_malloc with thisnew array. they are checking for this error.
 
		
	I have one question though:
		1) if we go in a particular range say 512-1024 and do not find the contiguous  block should we keep looking in further
		 blocks(1025-2048) I think we should becuase having the next free block is more beneficial than allocating a new plac
		e altogether to avoid copying(copying is very slow).
		
